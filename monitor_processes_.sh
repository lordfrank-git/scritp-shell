#!/bin/bash

# D√©finition des couleurs
GREEN="\e[32m"
YELLOW="\e[33m"
RED="\e[31m"
BLUE="\e[34m"
RESET="\e[0m"

# Fichier de log
LOGFILE="/var/log/monitor_processes.log"

# Liste des processus √† surveiller
PROCESSES=("apache2" "mysql" "ssh")

# Fonction pour afficher des messages format√©s
log_message() {
    local message="$1"
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') - $message" | tee -a $LOGFILE
}

error_message() {
    local message="$1"
    echo -e "${RED}[ERREUR]${RESET} $message"
    log_message "ERREUR: $message"
}

# Adresse email de destination pour les alertes
ALERT_EMAIL="tonadressemail@gmail.com"

# Fonction d'envoi d'alerte par email via sSMTP
send_alert_mail() {
    local subject="$1"        # $1 signifie le premier argument
    local message="$2"        # $2 signifie le second argument
    echo -e "$message" | mail -s "$subject" "$ALERT_EMAIL"      # -e renvoie 0 si fichier existe. et 
}

# V√©rification des droits root
if [[ $EUID -ne 0 ]]; then
    error_message "Ce script doit √™tre ex√©cut√© en tant que root (sudo)."
    exit 1
fi

# Fonction de surveillance des processus
monitor_processes() {
    echo -e "${BLUE}------------------------------------------------${RESET}"
    echo -e "${YELLOW}üîç Surveillance des processus...${RESET}"
    echo -e "${BLUE}------------------------------------------------${RESET}"
    
    ALERT_TRIGGERED=0
    STOPPED_PROCESSES=()

    for PROCESS in "${PROCESSES[@]}"; do
        if pgrep "$PROCESS" > /dev/null; then
            echo -e "${GREEN}‚úÖ $PROCESS est en cours d'ex√©cution${RESET}"
            log_message "‚úÖ $PROCESS est en cours d'ex√©cution"
        else
            echo -e "${RED}‚ùå ALERTE: $PROCESS est arr√™t√©${RESET}"
            log_message "‚ö†Ô∏è ALERTE: $PROCESS est arr√™t√©"
            ALERT_TRIGGERED=1
            STOPPED_PROCESSES+=("$PROCESS")  # Ajoute le processus √† la liste des arr√™ts

            # Option : Red√©marrer automatiquement le service si disponible
            if systemctl list-units --type=service | grep -q "$PROCESS.service"; then
                echo -e "${YELLOW}üîÑ Tentative de red√©marrage de $PROCESS...${RESET}"
                systemctl restart "$PROCESS"
                if pgrep "$PROCESS" > /dev/null; then
                    echo -e "${GREEN}‚úÖ $PROCESS red√©marr√© avec succ√®s${RESET}"
                    log_message "‚úÖ $PROCESS red√©marr√© avec succ√®s"
                else
                    echo -e "${RED}‚ùå √âchec du red√©marrage de $PROCESS${RESET}"
                    log_message "‚ùå √âchec du red√©marrage de $PROCESS"
                fi
            fi
        fi
    done

    # Envoi d'un email si un ou plusieurs processus sont arr√™t√©s
    if [[ $ALERT_TRIGGERED -eq 1 ]]; then
        STOPPED_LIST=$(printf "%s\n" "${STOPPED_PROCESSES[@]}")
        send_alert_mail "üö® ALERTE PROCESSUS CRITIQUES" \
        "Les processus suivants sont arr√™t√©s sur le serveur :\n$STOPPED_LIST"
    fi
}

# Fonction d'affichage du bilan
display_summary() {
    echo -e "${BLUE}------------------------------------------------${RESET}"
    echo -e "${YELLOW}üìä BILAN DU MONITORING${RESET}"
    echo -e "${BLUE}------------------------------------------------${RESET}"
    
    if [[ $ALERT_TRIGGERED -eq 1 ]]; then
        echo -e "${RED}‚ùå Une ou plusieurs alertes ont √©t√© d√©tect√©es !${RESET}"
        log_message "‚ùå ALERTE: Un ou plusieurs processus √©taient arr√™t√©s"
    else
        echo -e "${GREEN}‚úÖ Tous les processus sont en cours d'ex√©cution.${RESET}"
        log_message "‚úÖ Aucun probl√®me d√©tect√©, tous les processus fonctionnent normalement."
    fi

    echo -e "${BLUE}------------------------------------------------${RESET}"
    echo -e "${GREEN}‚úÖ Fin du monitoring.${RESET}"
}

# Ex√©cution du script
log_message "üöÄ D√©but du monitoring des processus"
monitor_processes
display_summary
log_message "üèÅ Fin du monitoring des processus"
